Q1:
#include <cstdio>

template <typename T>
T add(T a, T b) {
        return a + b;
}

int main() {
        printf("%d", add(3,1));
        return 0;
}

Q2:
.LC0:
        .string "%d"
main:
        push    rbp
        mov     rbp, rsp
        mov     esi, 1
        mov     edi, 3
        call    int add<int>(int, int)
        mov     esi, eax
        mov     edi, OFFSET FLAT:.LC0
        mov     eax, 0
        call    printf
        mov     eax, 0
        pop     rbp
        ret
int add<int>(int, int):
        push    rbp
        mov     rbp, rsp
        mov     DWORD PTR [rbp-4], edi
        mov     DWORD PTR [rbp-8], esi
        mov     edx, DWORD PTR [rbp-4]
        mov     eax, DWORD PTR [rbp-8]
        add     eax, edx
        pop     rbp
        ret
Q3:
.LCO is a label for the string in printf
push the previous call frame rbp onto the call stack to back up rbp
overwrite rbp with rsp so rsp can now change and rbp will be the original value of rsp
store 1 in esi register
store 3 in edi register
call add which moves instrcution to add function
push rbp to new stack for add function
overwite rbp with rsp so rsp can now chnage and rbp will be the original value of rsp
store edi to stack memory at rbp-4 becaue and int is 4 bytes
store esi to stack memory at rbp-8 (need 4 bytes after rbp-4) because an int is 4 bytes
move value stored at rbp-4 to edx register
move value stored at rbp-8 to eax register
add edx to eax
pop rbp off current stack and return to its location in main to retrieve old value
return from add function
move value in eax to esi
move the string stored with label .LCO to edi
move 0 into eax for the system call
call printf which will display value in esi
move 0 into eax for return of system call
pop rbp to put it back to top of the stack and give its original value back
return out of the function

Q4:
.LC0:
        .string "%d"
main:
        sub     rsp, 8
        mov     esi, 4
        mov     edi, OFFSET FLAT:.LC0
        xor     eax, eax
        call    printf
        xor     eax, eax
        add     rsp, 8
        ret
Q5:
the new assembly is much shorter because the -O3 flag is the one used for the greatest optimization of assembly code. The shorter amount of code allows for optimization of memory usage and execution time. -O0 turns off optimization completely.
